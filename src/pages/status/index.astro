---
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
---

<Layout title="Status">
    <div class="flex flex-col items-center">
        <div
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-r lg:grid-cols-4 2xl:grid-cols-5 px-4 gap-2 min-w-[75%] justify-items-center"
            x-data="status()"
        >
            <div class="col-span-full w-full">
                <Header />
            </div>
            <div x-show="!loaded" class="col-span-full text-center text-white">
                Loading...
            </div>
            <template x-for="channel in channels">
                <!-- .card {
        position: relative;
        border: 1px solid gray;
        border-radius: 0.5em;
        overflow: hidden;
        background: #efefef;
    } -->
                <div
                    class="card w-full relative border border-purple-400 rounded-lg bg-white overflow-hidden"
                >
                    <div class="stream">
                        <div class="broadcaster" x-text="channel.user_name">
                        </div>
                        <div class="viewers">
                            <img
                                class="eye"
                                src="https://www.svgrepo.com/show/501194/eye.svg"
                            />
                            <span x-text="channel.viewer_count"></span>
                        </div>
                    </div>
                    <div>
                        <a x-bind:href="channel.url"
                            ><img
                                x-bind:src="channel.thumbnail_url"
                                class="w-full h-auto"
                                width="320"
                                height="180"
                            /></a
                        >
                    </div>
                    <div class="data">
                        <div class="category" x-text="channel.game_name"></div>
                        <div x-text="channel.title"></div>
                    </div>
                </div>
            </template>
        </div>
    </div>
    <Footer />
</Layout>

<style scoped>
    .data {
        padding: 1em;
    }

    .data > div {
        padding-bottom: 0.5em;
    }

    .stream {
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(2px);
        padding: 1em;
        display: flex;
        justify-items: center;
        justify-content: space-between;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        pointer-events: none;
    }

    .broadcaster {
        display: flex;
        align-items: center;
        font-size: 1.2em;
        font-weight: bold;
        color: white;
    }

    .viewers {
        background: red;
        border-radius: 0.25em;
        padding: 0.25em;
        color: white;
        font-weight: bold;
        min-width: 2em;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .eye {
        filter: invert(1);
        width: 1em;
        height: 1em;
        margin-right: 0.25em;
    }

    .category {
        font-size: 1.1em;
        font-weight: bold;
    }
</style>

<script is:inline>
    function status() {
        return {
            channels: [],
            loaded: false,
            async init() {
                let response = await fetch(
                    "https://heat-api-staging.j38.workers.dev/live"
                );
                let json = await response.json();
                json.forEach(async (channel) => {
                    // if (!this.channels.has(channel.user_id)) {
                    this.channels.push({
                        ...channel,
                        url: "https://twitch.tv/" + channel.user_name,
                        thumbnail_url: channel.thumbnail_url
                            .replace("{width}", "320")
                            .replace("{height}", "180"),
                    });
                    // }
                });
                this.loaded = true;
            },
        };
    }

    /*
export default {
  data() {
    return {
      channels: new Map(),
    };
  },
  async created() {
    let response = await fetch("https://heat-api-staging.j38.workers.dev/live");
    let json = await response.json();

    json.forEach(async (channel) => {
      // if (!this.channels.has(channel.user_id)) {
      this.channels.set(channel.user_id, {
        ...channel,
        url: "https://twitch.tv/" + channel.user_name,
        thumbnail_url: channel.thumbnail_url.replace("{width}", "320").replace("{height}", "180")
      });
      console.log(channel);
      // }
    });

  },
};
*/
</script>
